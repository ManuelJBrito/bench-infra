#!/usr/bin/env bash

set -euo pipefail

# === Functions ===

print_error() {
    echo -e "\033[0;31mError:\033[0m $1"
}

print_help() {
    cat <<EOF
Usage: ./autogen.sh [OPTIONS]

Options:
  --cc <path>            Path to C compiler (required)
  --cxx <path>           Path to C++ compiler (optional; defaults to <cc>++)
  --lit <path>           Path to llvm-lit (default: system llvm-lit if available)
  --jobs <int>           Number of ninja jobs (default: nproc)
  --runs <int>           Number of test runs (default: 3)
  --machine <name>       Machine name (default: hostname)
  --build-dir <name>     Name of top-level build directory inside bench-infra/
                         Default: "builds"
  --common-flags <flags> Common optimization flags (default: -O3)
  -h, --help             Show this help message and exit

Example:
  ./autogen.sh --cc /opt/llvm/bin/clang --build-dir opt0 --machine walter
EOF
}

# === Defaults ===
ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BENCH_INFRA_DIR="$ROOT"
DEFAULT_JOBS="$(nproc)"
DEFAULT_RUNS=3
DEFAULT_MACHINE="$(hostname)"
COMMON_FLAGS="-O3"

# === Args ===
LIT=""
NINJA_JOBS=""
RUNS=""
MACHINE_NAME=""
BUILD_ROOT_BASE=""
CC=""
CXX=""
BUILD_DIR_NAME="builds"

# === Parse arguments ===
while [[ $# -gt 0 ]]; do
    case $1 in
        --cc) CC="$2"; shift 2 ;;
        --cxx) CXX="$2"; shift 2 ;;
        --lit) LIT="$2"; shift 2 ;;
        --jobs) NINJA_JOBS="$2"; shift 2 ;;
        --runs) RUNS="$2"; shift 2 ;;
        --machine) MACHINE_NAME="$2"; shift 2 ;;
        --build-dir) BUILD_DIR_NAME="$2"; shift 2 ;;
        --common-flags) COMMON_FLAGS="$2"; shift 2 ;;
        -h|--help) print_help; exit 0 ;;
        *) print_error "Unknown option: $1"; print_help; exit 1 ;;
    esac
done

# === Validate and set defaults ===
if [[ -z "$CC" ]]; then
    print_error "--cc is required."
    print_help
    exit 1
fi

# Resolve CC to full path, error if not found
# Resolve to absolute path if relative
abs_path() {
  local path="$1"
  if [[ "$path" = /* ]]; then
    echo "$path"
  else
    # use readlink -f to get absolute path
    readlink -f "$path"
  fi
}

if [[ -z "$CC" ]]; then
    print_error "--cc is required."
    print_help
    exit 1
fi

CC_PATH="$(command -v "$CC" || true)"
if [[ -z "$CC_PATH" ]]; then
    print_error "C compiler '$CC' not found in PATH."
    exit 1
fi
CC="$(abs_path "$CC_PATH")"

if [[ -z "$CXX" ]]; then
    # Try CC++ by appending '++' and resolve full path
    CXX_CANDIDATE="${CC}++"
    if [[ -x "$CXX_CANDIDATE" ]]; then
        CXX="$CXX_CANDIDATE"
    else
        CC_DIR="$(dirname "$CC")"
        if [[ -x "$CC_DIR/clang++" ]]; then
            CXX="$CC_DIR/clang++"
        else
            print_error "Could not infer CXX from CC. Please provide --cxx explicitly."
            exit 1
        fi
    fi
else
    CXX_PATH="$(command -v "$CXX" || true)"
    if [[ -z "$CXX_PATH" ]]; then
        print_error "C++ compiler '$CXX' not found in PATH."
        exit 1
    fi
    CXX="$(abs_path "$CXX_PATH")"
fi



if [[ -z "$LIT" ]]; then
    if command -v llvm-lit &>/dev/null; then
        LIT_PATH="$(command -v llvm-lit)"
        LIT="$(abs_path "$LIT_PATH")"
    else
        print_error "llvm-lit not found in PATH and --lit not provided."
        exit 1
    fi
else
    # user provided lit path â€” resolve absolute path and check executable
    if [[ ! -x "$LIT" ]]; then
        print_error "Provided llvm-lit at '$LIT' is not executable or does not exist."
        exit 1
    fi
    LIT="$(abs_path "$LIT")"
fi

NINJA_JOBS="${NINJA_JOBS:-$DEFAULT_JOBS}"
RUNS="${RUNS:-$DEFAULT_RUNS}"
MACHINE_NAME="${MACHINE_NAME:-$DEFAULT_MACHINE}"
BUILD_ROOT_BASE="$BUILD_DIR_NAME"
RESULTS_ROOT_BASE="$ROOT/results/$MACHINE_NAME"

# === Confirm or create build dir ===
FULL_BUILD_PATH="$BENCH_INFRA_DIR/$BUILD_ROOT_BASE"
if [[ -d "$FULL_BUILD_PATH" ]]; then
    read -p "Directory '$FULL_BUILD_PATH' exists. Wipe and recreate? [y/N]: " confirm
    if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
        rm -rf "$FULL_BUILD_PATH"
        mkdir -p "$FULL_BUILD_PATH"
    else
        echo "Aborting: build directory must be wiped before continuing."
        exit 1
    fi
else
    mkdir -p "$FULL_BUILD_PATH"
fi


# === Output file path ===
OUTPUT_SCRIPT="$BENCH_INFRA_DIR/scripts/common.sh"

# === Generate common.sh ===
cat > "$OUTPUT_SCRIPT" <<EOF
#!/usr/bin/env bash

# Generated by autogen.sh.

# === Paths ===
export TEST_SUITE_DIR="test-suite"
export SPEC_DIR="\$TEST_SUITE_DIR/test-suite-externals/speccpu2017"
export LIT="$LIT"
export COMPARE="\$TEST_SUITE_DIR/utils/compare.py"
export VARIANTS="variants"

# === Run settings ===
export NINJA_JOBS=$NINJA_JOBS
export RUNS=$RUNS

# === Machine name ===
export MACHINE_NAME="$MACHINE_NAME"

# === Project directories ===
export BUILD_ROOT_BASE="$BUILD_ROOT_BASE"
export RESULTS_ROOT_BASE="$RESULTS_ROOT_BASE"

# === Compiler and optimization flags ===
export CC="$CC"
export CXX="$CXX"
export COMMON_FLAGS="$COMMON_FLAGS"

set -euo pipefail
EOF

chmod +x "$OUTPUT_SCRIPT"
echo -e "\033[0;32mGenerated:\033[0m scripts/common.sh"
